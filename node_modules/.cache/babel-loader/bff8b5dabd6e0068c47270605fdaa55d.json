{"ast":null,"code":"var _jsxFileName = \"/Users/s212218/calendar_app/src/App.js\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\"; // import \"@fullcalendar/core/main.css\";\n// import \"@fullcalendar/daygrid/main.css\";\n// import \"@fullcalendar/timegrid/main.css\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/*#__PURE__*/\n_jsxDEV(FullCalendar, {\n  locale: \"ja\" // 日本語\n  ,\n  defaultView: \"timeGridWeek\" // 基本UI\n  ,\n  slotDuration: \"00:30:00\" // 表示する時間軸の最小値\n  ,\n  selectable: true // 日付選択可能\n  ,\n  allDaySlot: false // alldayの表示設定\n  ,\n  titleFormat: {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\"\n  } // タイトルに年月日を表示\n  ,\n  header: {\n    left: \"prev,next,today\",\n    center: \"title\",\n    right: \"dayGridMonth,timeGridWeek\"\n  },\n  businessHours: {\n    daysOfWeek: [1, 2, 3, 4, 5],\n    startTime: \"0:00\",\n    endTime: \"24:00\"\n  },\n  plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n  ref: this.ref,\n  weekends: true // 週末表示\n  ,\n  events: this.myEvents // 起動時に登録するイベント\n  ,\n  select: this.handleSelect // カレンダー範囲選択時\n  ,\n  eventClick: this.handleClick // イベントクリック時\n\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 1\n}, this);\n\nthis.myEvents = [{\n  id: 0,\n  title: \"event 1\",\n  start: \"2020-05-22 10:00:00\",\n  end: \"2020-05-22 11:00:00\",\n  memo: \"memo1\"\n}, {\n  id: 1,\n  title: \"event 2\",\n  start: \"2020-05-23 10:00:00\",\n  end: \"2020-05-23 11:00:00\",\n  memo: \"memo2\"\n}]; // renderForm() {\n//   return (\n//     <div\n//       className={\n//         this.state.formInview ? \"container__form inview\" : \"container__form\"\n//       }\n//     >\n//       <form>\n//         {this.state.isChange ? (\n//           <div className=\"container__form__header\">予定を変更</div>\n//         ) : (\n//           <div className=\"container__form__header\">予定を入力</div>\n//         )}\n//         <div>{this.renderTitle()}</div>\n//         <div>{this.renderStartTime()}</div>\n//         <div>{this.renderEndTime()}</div>\n//         <div>{this.renderMemo()}</div>\n//         <div>{this.renderBtn()}</div>\n//       </form>\n//     </div>\n//   );\n// };\n// renderTitle() {\n//   return (\n//     <React.Fragment>\n//       <p className=\"container__form__label\">タイトル</p>\n//       <input\n//         className=\"container__form__title\"\n//         type=\"text\"\n//         value={this.state.inputTitle}\n//         onChange={(e) => {\n//           this.setState({ inputTitle: e.target.value });\n//           if (e.target.value === \"\") {\n//             this.setState({ isInputTitle: false });\n//           } else {\n//             this.setState({ isInputTitle: true });\n//           }\n//         }}\n//       />\n//     </React.Fragment>\n//   );\n// }\n// renderMemo() {\n//   return (\n//     <React.Fragment>\n//       <p className=\"container__form__label\">メモ</p>\n//       <textarea\n//         className=\"container__form__memo\"\n//         rows=\"3\"\n//         value={this.state.inputMemo}\n//         onChange={(e) => {\n//           this.setState({ inputMemo: e.target.value });\n//         }}\n//       />\n//     </React.Fragment>\n//   );\n// }\n// renderStartTime() {\n//   return (\n//     <React.Fragment>\n//       <p className=\"container__form__label\">開始日時</p>\n//       <DatePicker\n//         className=\"container__form__datetime\"\n//         locale=\"ja\"\n//         dateFormat=\"yyyy/MM/d HH:mm\"\n//         selected={this.state.inputStart}\n//         showTimeSelect\n//         timeFormat=\"HH:mm\"\n//         timeIntervals={10}\n//         todayButton=\"today\"\n//         onChange={(time) => {\n//           this.setState({ inputStart: time });\n//         }}\n//       />\n//     </React.Fragment>\n//   );\n// }\n// renderEndTime() {\n//   return (\n//     <React.Fragment>\n//       <p className=\"container__form__label\">終了日時</p>\n//       <DatePicker\n//         className=\"container__form__datetime\"\n//         locale=\"ja\"\n//         dateFormat=\"yyyy/MM/d HH:mm\"\n//         selected={this.state.inputEnd}\n//         showTimeSelect\n//         timeFormat=\"HH:mm\"\n//         timeIntervals={10}\n//         todayButton=\"today\"\n//         onChange={(time) => {\n//           this.setState({ inputEnd: time });\n//         }}\n//       />\n//     </React.Fragment>\n//   );\n// }\n// renderBtn() {\n//   return (\n//     <div>\n//       {!this.state.isChange ? (\n//         <div>\n//           <input\n//             className=\"container__form__btn_cancel\"\n//             type=\"button\"\n//             value=\"キャンセル\"\n//             onClick={() => {\n//               this.setState({ formInview: false });\n//             }}\n//           />\n//           <input\n//             className=\"container__form__btn_save\"\n//             type=\"button\"\n//             value=\"保存\"\n//             disabled={!this.state.isInputTitle}\n//             onClick={this.onAddEvent}\n//           />\n//         </div>\n//       ) : (\n//         <div>\n//           <input\n//             className=\"container__form__btn_delete\"\n//             type=\"button\"\n//             value=\"削除\"\n//             onClick={this.onDeleteEvent}\n//           />\n//           <input\n//             className=\"container__form__btn_save\"\n//             type=\"button\"\n//             value=\"変更\"\n//             onClick={this.onChangeEvent}\n//           />\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n// handleSelect = (selectInfo) => {\n//   let start = new Date(selectInfo.start);\n//   let end = new Date(selectInfo.end);\n//   start.setHours(start.getHours());\n//   end.setHours(end.getHours());\n//   this.setState({ inputTitle: \"\" });\n//   this.setState({ inputMemo: \"\" });\n//   this.setState({ isInputTitle: false });\n//   this.setState({ inputStart: start });\n//   this.setState({ inputEnd: end });\n//   this.setState({ isChange: false });\n//   this.setState({ formInview: true });\n// };\n// handleClick = (info) => {\n//   this.selEventID = info.event.id;\n//   const selEvent = this.myEvents[info.event.id];\n//   const title = selEvent.title;\n//   const memo = selEvent.memo;\n//   const start = new Date(selEvent.start);\n//   const end = new Date(selEvent.end);\n//   this.setState({ inputTitle: title });\n//   this.setState({ inputMemo: memo });\n//   this.setState({ isInputTitle: true });\n//   this.setState({ inputStart: start });\n//   this.setState({ inputEnd: end });\n//   this.setState({ isChange: true });\n//   this.setState({ formInview: true });\n// };\n// onAddEvent() {\n//   const starttime = this.changeDateToString(this.state.inputStart);\n//   const endtime = this.changeDateToString(this.state.inputEnd);\n//   if (starttime >= endtime) {\n//     alert(\"開始時間と終了時間を確認してください。\");\n//     return;\n//   }\n//   const event = {\n//     title: this.state.inputTitle,\n//     memo: this.state.inputMemo,\n//     start: starttime,\n//     end: endtime,\n//   };\n//   if (this.addEvent(event) === true) {\n//     window.alert(\"設定しました\");\n//     this.setState({ formInview: false });\n//   }\n// }\n// addEvent = (ev) => {\n//   ev.id = this.getID();\n//   this.myEvents.push(ev);\n//   this.ref.current.getApi().addEvent(ev);\n//   return true;\n// };\n// sortEventID = (a, b) => {\n//   return a.id < b.id ? -1 : a.id > b.id ? 1 : 0;\n// };\n// getID = () => {\n//   this.myEvents.sort(this.sortEventID);\n//   let i;\n//   for (i = 0; i < this.myEvents.length; i++) {\n//     if (this.myEvents[i].id !== i) {\n//       break;\n//     }\n//   }\n//   return i;\n// };\n// changeDateToString(dt) {\n//   const year = dt.getFullYear();\n//   const month = this.getdoubleDigestNumer(dt.getMonth() + 1);\n//   const date = this.getdoubleDigestNumer(dt.getDate());\n//   const hour = this.getdoubleDigestNumer(dt.getHours());\n//   const minutes = this.getdoubleDigestNumer(dt.getMinutes());\n//   const retDate = `${year}-${month}-${date} ${hour}:${minutes}:00`;\n//   return retDate;\n// }\n// getdoubleDigestNumer(number) {\n//   return (\"0\" + number).slice(-2);\n// }\n// onChangeEvent(values) {\n//   if (window.confirm(\"変更しますか？\")) {\n//     const starttime = this.changeDateToString(this.state.inputStart);\n//     const endtime = this.changeDateToString(this.state.inputEnd);\n//     if (starttime >= endtime) {\n//       alert(\"開始時間と終了時間を確認してください。\");\n//       return;\n//     }\n//     const event = {\n//       title: this.state.inputTitle,\n//       memo: this.state.inputMemo,\n//       start: starttime,\n//       end: endtime,\n//       id: this.selEventID,\n//     };\n//     if (this.changeEvent(event) === true) {\n//       window.alert(\"イベントを変更しました。\");\n//       this.setState({ formInview: false });\n//     }\n//   } else {\n//     return;\n//   }\n// }\n// onDeleteEvent() {\n//   if (window.confirm(\"削除しますか？\")) {\n//     if (this.selEventID < this.EVENT_SEL_NON) {\n//       let EventID = this.selEventID;\n//       let delevent = this.ref.current.getApi().getEventById(EventID);\n//       delevent.remove();\n//       this.selEventID = this.EVENT_SEL_NON;\n//       this.myEvents[EventID].isDel = true;\n//     }\n//     this.setState({ formInview: false });\n//     alert(\"イベントを削除しました。\");\n//   } else {\n//     return;\n//   }\n// }\n\nexport default class App {}","map":{"version":3,"sources":["/Users/s212218/calendar_app/src/App.js"],"names":["FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","year","month","day","left","center","right","daysOfWeek","startTime","endTime","ref","myEvents","handleSelect","handleClick","id","title","start","end","memo","App"],"mappings":";AAAA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B,C,CACA;AACA;AACA;;;;AAEA;AAAA,QAAC,YAAD;AACE,EAAA,MAAM,EAAC,IADT,CACc;AADd;AAEE,EAAA,WAAW,EAAC,cAFd,CAE6B;AAF7B;AAGE,EAAA,YAAY,EAAC,UAHf,CAG0B;AAH1B;AAIE,EAAA,UAAU,EAAE,IAJd,CAIoB;AAJpB;AAKE,EAAA,UAAU,EAAE,KALd,CAKqB;AALrB;AAME,EAAA,WAAW,EAAE;AACXC,IAAAA,IAAI,EAAE,SADK;AAEXC,IAAAA,KAAK,EAAE,OAFI;AAGXC,IAAAA,GAAG,EAAE;AAHM,GANf,CAUK;AAVL;AAWE,EAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE,iBADA;AAENC,IAAAA,MAAM,EAAE,OAFF;AAGNC,IAAAA,KAAK,EAAE;AAHD,GAXV;AAgBE,EAAA,aAAa,EAAE;AACbC,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CADC;AAEbC,IAAAA,SAAS,EAAE,MAFE;AAGbC,IAAAA,OAAO,EAAE;AAHI,GAhBjB;AAqBE,EAAA,OAAO,EAAE,CAACX,aAAD,EAAgBC,cAAhB,EAAgCC,iBAAhC,CArBX;AAsBE,EAAA,GAAG,EAAE,KAAKU,GAtBZ;AAuBE,EAAA,QAAQ,EAAE,IAvBZ,CAuBkB;AAvBlB;AAwBE,EAAA,MAAM,EAAE,KAAKC,QAxBf,CAwByB;AAxBzB;AAyBE,EAAA,MAAM,EAAE,KAAKC,YAzBf,CAyB6B;AAzB7B;AA0BE,EAAA,UAAU,EAAE,KAAKC,WA1BnB,CA0BgC;;AA1BhC;AAAA;AAAA;AAAA;AAAA;;AA4BA,KAAKF,QAAL,GAAgB,CACd;AACEG,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,KAAK,EAAE,SAFT;AAGEC,EAAAA,KAAK,EAAE,qBAHT;AAIEC,EAAAA,GAAG,EAAE,qBAJP;AAKEC,EAAAA,IAAI,EAAE;AALR,CADc,EAQd;AACEJ,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,KAAK,EAAE,SAFT;AAGEC,EAAAA,KAAK,EAAE,qBAHT;AAIEC,EAAAA,GAAG,EAAE,qBAJP;AAKEC,EAAAA,IAAI,EAAE;AALR,CARc,CAAhB,C,CAgeAAe,MAAMC,GAAN,CAAU","sourcesContent":["import FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\n// import \"@fullcalendar/core/main.css\";\n// import \"@fullcalendar/daygrid/main.css\";\n// import \"@fullcalendar/timegrid/main.css\";\n\n<FullCalendar\n  locale=\"ja\" // 日本語\n  defaultView=\"timeGridWeek\" // 基本UI\n  slotDuration=\"00:30:00\" // 表示する時間軸の最小値\n  selectable={true} // 日付選択可能\n  allDaySlot={false} // alldayの表示設定\n  titleFormat={{\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  }} // タイトルに年月日を表示\n  header={{\n    left: \"prev,next,today\",\n    center: \"title\",\n    right: \"dayGridMonth,timeGridWeek\",\n  }}\n  businessHours={{\n    daysOfWeek: [1, 2, 3, 4, 5],\n    startTime: \"0:00\",\n    endTime: \"24:00\",\n  }}\n  plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n  ref={this.ref}\n  weekends={true} // 週末表示\n  events={this.myEvents} // 起動時に登録するイベント\n  select={this.handleSelect} // カレンダー範囲選択時\n  eventClick={this.handleClick} // イベントクリック時\n/>\nthis.myEvents = [\n  {\n    id: 0,\n    title: \"event 1\",\n    start: \"2020-05-22 10:00:00\",\n    end: \"2020-05-22 11:00:00\",\n    memo: \"memo1\",\n  },\n  {\n    id: 1,\n    title: \"event 2\",\n    start: \"2020-05-23 10:00:00\",\n    end: \"2020-05-23 11:00:00\",\n    memo: \"memo2\",\n  },\n];\n// renderForm() {\n//   return (\n//     <div\n//       className={\n//         this.state.formInview ? \"container__form inview\" : \"container__form\"\n//       }\n//     >\n//       <form>\n//         {this.state.isChange ? (\n//           <div className=\"container__form__header\">予定を変更</div>\n//         ) : (\n//           <div className=\"container__form__header\">予定を入力</div>\n//         )}\n//         <div>{this.renderTitle()}</div>\n//         <div>{this.renderStartTime()}</div>\n//         <div>{this.renderEndTime()}</div>\n//         <div>{this.renderMemo()}</div>\n//         <div>{this.renderBtn()}</div>\n//       </form>\n//     </div>\n//   );\n// };\n// renderTitle() {\n//   return (\n//     <React.Fragment>\n//       <p className=\"container__form__label\">タイトル</p>\n//       <input\n//         className=\"container__form__title\"\n//         type=\"text\"\n//         value={this.state.inputTitle}\n//         onChange={(e) => {\n//           this.setState({ inputTitle: e.target.value });\n\n//           if (e.target.value === \"\") {\n//             this.setState({ isInputTitle: false });\n//           } else {\n//             this.setState({ isInputTitle: true });\n//           }\n//         }}\n//       />\n//     </React.Fragment>\n//   );\n// }\n// renderMemo() {\n//   return (\n//     <React.Fragment>\n//       <p className=\"container__form__label\">メモ</p>\n//       <textarea\n//         className=\"container__form__memo\"\n//         rows=\"3\"\n//         value={this.state.inputMemo}\n//         onChange={(e) => {\n//           this.setState({ inputMemo: e.target.value });\n//         }}\n//       />\n//     </React.Fragment>\n//   );\n// }\n// renderStartTime() {\n//   return (\n//     <React.Fragment>\n//       <p className=\"container__form__label\">開始日時</p>\n//       <DatePicker\n//         className=\"container__form__datetime\"\n//         locale=\"ja\"\n//         dateFormat=\"yyyy/MM/d HH:mm\"\n//         selected={this.state.inputStart}\n//         showTimeSelect\n//         timeFormat=\"HH:mm\"\n//         timeIntervals={10}\n//         todayButton=\"today\"\n//         onChange={(time) => {\n//           this.setState({ inputStart: time });\n//         }}\n//       />\n//     </React.Fragment>\n//   );\n// }\n// renderEndTime() {\n//   return (\n//     <React.Fragment>\n//       <p className=\"container__form__label\">終了日時</p>\n//       <DatePicker\n//         className=\"container__form__datetime\"\n//         locale=\"ja\"\n//         dateFormat=\"yyyy/MM/d HH:mm\"\n//         selected={this.state.inputEnd}\n//         showTimeSelect\n//         timeFormat=\"HH:mm\"\n//         timeIntervals={10}\n//         todayButton=\"today\"\n//         onChange={(time) => {\n//           this.setState({ inputEnd: time });\n//         }}\n//       />\n//     </React.Fragment>\n//   );\n// }\n// renderBtn() {\n//   return (\n//     <div>\n//       {!this.state.isChange ? (\n//         <div>\n//           <input\n//             className=\"container__form__btn_cancel\"\n//             type=\"button\"\n//             value=\"キャンセル\"\n//             onClick={() => {\n//               this.setState({ formInview: false });\n//             }}\n//           />\n//           <input\n//             className=\"container__form__btn_save\"\n//             type=\"button\"\n//             value=\"保存\"\n//             disabled={!this.state.isInputTitle}\n//             onClick={this.onAddEvent}\n//           />\n//         </div>\n//       ) : (\n//         <div>\n//           <input\n//             className=\"container__form__btn_delete\"\n//             type=\"button\"\n//             value=\"削除\"\n//             onClick={this.onDeleteEvent}\n//           />\n//           <input\n//             className=\"container__form__btn_save\"\n//             type=\"button\"\n//             value=\"変更\"\n//             onClick={this.onChangeEvent}\n//           />\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n// handleSelect = (selectInfo) => {\n//   let start = new Date(selectInfo.start);\n//   let end = new Date(selectInfo.end);\n//   start.setHours(start.getHours());\n//   end.setHours(end.getHours());\n\n//   this.setState({ inputTitle: \"\" });\n//   this.setState({ inputMemo: \"\" });\n//   this.setState({ isInputTitle: false });\n//   this.setState({ inputStart: start });\n//   this.setState({ inputEnd: end });\n//   this.setState({ isChange: false });\n//   this.setState({ formInview: true });\n// };\n// handleClick = (info) => {\n//   this.selEventID = info.event.id;\n//   const selEvent = this.myEvents[info.event.id];\n//   const title = selEvent.title;\n//   const memo = selEvent.memo;\n//   const start = new Date(selEvent.start);\n//   const end = new Date(selEvent.end);\n\n//   this.setState({ inputTitle: title });\n//   this.setState({ inputMemo: memo });\n//   this.setState({ isInputTitle: true });\n//   this.setState({ inputStart: start });\n//   this.setState({ inputEnd: end });\n//   this.setState({ isChange: true });\n//   this.setState({ formInview: true });\n// };\n// onAddEvent() {\n//   const starttime = this.changeDateToString(this.state.inputStart);\n//   const endtime = this.changeDateToString(this.state.inputEnd);\n\n//   if (starttime >= endtime) {\n//     alert(\"開始時間と終了時間を確認してください。\");\n//     return;\n//   }\n//   const event = {\n//     title: this.state.inputTitle,\n//     memo: this.state.inputMemo,\n//     start: starttime,\n//     end: endtime,\n//   };\n//   if (this.addEvent(event) === true) {\n//     window.alert(\"設定しました\");\n//     this.setState({ formInview: false });\n//   }\n// }\n// addEvent = (ev) => {\n//   ev.id = this.getID();\n//   this.myEvents.push(ev);\n//   this.ref.current.getApi().addEvent(ev);\n//   return true;\n// };\n// sortEventID = (a, b) => {\n//   return a.id < b.id ? -1 : a.id > b.id ? 1 : 0;\n// };\n// getID = () => {\n//   this.myEvents.sort(this.sortEventID);\n//   let i;\n//   for (i = 0; i < this.myEvents.length; i++) {\n//     if (this.myEvents[i].id !== i) {\n//       break;\n//     }\n//   }\n//   return i;\n// };\n// changeDateToString(dt) {\n//   const year = dt.getFullYear();\n//   const month = this.getdoubleDigestNumer(dt.getMonth() + 1);\n//   const date = this.getdoubleDigestNumer(dt.getDate());\n//   const hour = this.getdoubleDigestNumer(dt.getHours());\n//   const minutes = this.getdoubleDigestNumer(dt.getMinutes());\n\n//   const retDate = `${year}-${month}-${date} ${hour}:${minutes}:00`;\n//   return retDate;\n// }\n// getdoubleDigestNumer(number) {\n//   return (\"0\" + number).slice(-2);\n// }\n// onChangeEvent(values) {\n//   if (window.confirm(\"変更しますか？\")) {\n//     const starttime = this.changeDateToString(this.state.inputStart);\n//     const endtime = this.changeDateToString(this.state.inputEnd);\n\n//     if (starttime >= endtime) {\n//       alert(\"開始時間と終了時間を確認してください。\");\n//       return;\n//     }\n\n//     const event = {\n//       title: this.state.inputTitle,\n//       memo: this.state.inputMemo,\n//       start: starttime,\n//       end: endtime,\n//       id: this.selEventID,\n//     };\n//     if (this.changeEvent(event) === true) {\n//       window.alert(\"イベントを変更しました。\");\n//       this.setState({ formInview: false });\n//     }\n//   } else {\n//     return;\n//   }\n// }\n// onDeleteEvent() {\n//   if (window.confirm(\"削除しますか？\")) {\n//     if (this.selEventID < this.EVENT_SEL_NON) {\n//       let EventID = this.selEventID;\n//       let delevent = this.ref.current.getApi().getEventById(EventID);\n//       delevent.remove();\n//       this.selEventID = this.EVENT_SEL_NON;\n//       this.myEvents[EventID].isDel = true;\n//     }\n//     this.setState({ formInview: false });\n//     alert(\"イベントを削除しました。\");\n//   } else {\n//     return;\n//   }\n// }\nexport default class App { }"]},"metadata":{},"sourceType":"module"}